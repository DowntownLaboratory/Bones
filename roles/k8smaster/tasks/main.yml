---
- name: Check Nodes
  command: kubectl get nodes
  register: kube_nodes
  ignore_errors: yes
- name: Reset Kubernetes Master
  command: kubeadm reset -f
  when: "('The connection to the server' in kube_nodes['stderr'])"
  register: kubeadm_reset
- name: Initialize Master Node 
  shell: kubeadm init --apiserver-advertise-address={{ ansible_default_ipv4.address }} --token={{ token }} --kubernetes-version={{ kubernetes_version }} --pod-network-cidr={{ podnet }}
  register: kubeadm_init
  when: kubeadm_reset is changed
- name: Configure Master Node {{ kubernetes_version }}
  block:
    - name: create Kubernetes config directory
      file:
        path: /root/.kube/
        state: directory
        owner: root
        group: root
        mode: 0755
    - name: copy admin.conf to config directory
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        owner: root
        group: root
        mode: 0755
        remote_src: yes
        backup: yes
    - name: join Kubernetes Cluster
      command: kubeadm join --ignore-preflight-errors=all --token {{ token }} {{ groups['k8smaster'][0] }}:6443 --discovery-token-unsafe-skip-ca-verification
    - name: restart kubelet1
      systemd:
        name: kubelet
        state: restarted
        daemon_reload: yes
        enabled: yes
    - name: create infrastructure file directory
      file:
        path: /root/infrastructure/
        state: directory
        owner: root
        group: root
        mode: 0755
    - name: copy over all infrastructure files
      copy:
        src: infrastructure/{{ item }}
        dest: /root/infrastructure/{{ item }}
      loop: 
        - "lets-encrypt-issuer.yaml"
        - "metallb-config.yaml"
        - "nats-1.0.1.tgz"
        - "nats-connector-1.0.0.tgz"
        - "nfs-client-provisioner-1.0.0.tgz"
    - name: create services file directory
      file:
        path: /root/services/
        state: directory
        owner: root
        group: root
        mode: 0755
    - name: copy over all services files
      copy:
        src: services/{{ item }}
        dest: /root/services/{{ item }}
      loop: 
        - "mariadb-1.0.0.tgz"
        - "postgres-1.0.0.tgz"
        - "nfs-client-provisioner-test-1.0.0.tgz"
        - "redis-1.0.0.tgz"
        - "prometheus-1.0.0.tgz"
  when: kubeadm_init is changed
# After the GameBox revival, we can add kubernetes nodes with labels for architecture.
# This way we can use helm to target amd64 architectures using nodeSelectors and we can remove all of our custom helm packages.