- name: Install Weave Works (Container Networking)
  shell: "kubectl apply -f \"https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')\""
  args:
    warn: false
- name: Install MetalLB (Load Balancing)
  block:
    - name: add metallb namespaces
      command: "kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/{{ metallb_version }}/manifests/namespace.yaml"
    - name: add metallb services
      command: 'kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/{{ metallb_version }}/manifests/metallb.yaml'
    - name: add metallb secret
      command: "kubectl create secret generic -n metallb-system memberlist --from-literal=secretkey='$(openssl rand -base64 128)'"
    - name: copy metallb config
      template: 
        src: metallb-config.yaml.j2
        dest: ./metallb-config.yaml
    - name: apply metallb config
      command: kubectl apply -f ./metallb-config.yaml
    - name: 'pause for {{ service_pause }} seconds(s)'
      pause:
        seconds: "{{ service_pause }}"
- name: Install Ingress-Nginx (Ingress Controller)
  command: arkade install ingress-nginx
- name: Install Cert-Manager (TLS)
  block:
    - name: install cert manager package
      command: arkade install cert-manager
    - name: 'Pause for {{ service_pause }} second(s)'
      pause:
        seconds: "{{ service_pause }}"
    - name: 'copy lets-encrypt-issuer.yaml template'
      template:
        src: lets-encrypt-issuer.yaml.j2
        dest: ./lets-encrypt-issuer.yaml
    - name: create certificate-manager resources
      command: kubectl apply -f ./lets-encrypt-issuer.yaml
      # this service reports an error because it doesnt build quickly ennough
      # instead of ignoring errors we use a service pause to wait for cert-manager to be ready.
      ignore_errors: no
- name: Install NFS Client Provisioner (Volumes Service)
  command: |
    helm install nfs stable/nfs-client-provisioner \
    --set image.repository=quay.io/external_storage/nfs-client-provisioner-arm 
    --set image.tag={{ nfs_client_provisioner_version }}
    --set storageClass.name={{ nfs_storage_name }} \
    --set storageClass.defaultClass=true \
    --set nfs.path={{ nfs_path }} \
    --set nfs.server={{ nfs_server }}